// Code generated by protoc-gen-go.
// source: elkm1grpc.proto
// DO NOT EDIT!

/*
Package elkm1grpc is a generated protocol buffer package.

It is generated from these files:
	elkm1grpc.proto

It has these top-level messages:
	ZoneStatusArgs
	ZoneStatusReport
	ArmingStatusArgs
	ZoneChangeArgs
	ArmingChangeArgs
	ArmingStatusReport
	ArmingStatusArea
	ArmArgs
	Zone
*/
package elkm1grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ArmingStatusArea_ArmingStatus int32

const (
	ArmingStatusArea_DISARMED                   ArmingStatusArea_ArmingStatus = 0
	ArmingStatusArea_ARMED_AWAY                 ArmingStatusArea_ArmingStatus = 1
	ArmingStatusArea_ARMED_STAY                 ArmingStatusArea_ArmingStatus = 2
	ArmingStatusArea_ARMED_STAY_INSTANT         ArmingStatusArea_ArmingStatus = 3
	ArmingStatusArea_ARMED_TO_NIGHT             ArmingStatusArea_ArmingStatus = 4
	ArmingStatusArea_ARMED_TO_NIGHT_INSTANT     ArmingStatusArea_ArmingStatus = 5
	ArmingStatusArea_ARMED_TO_VACATION          ArmingStatusArea_ArmingStatus = 6
	ArmingStatusArea_ARM_STEP_TO_NEXT_AWAY_MODE ArmingStatusArea_ArmingStatus = 7
	ArmingStatusArea_ARM_STEP_TO_NEXT_STAY_MODE ArmingStatusArea_ArmingStatus = 8
	ArmingStatusArea_FORCE_AWAY                 ArmingStatusArea_ArmingStatus = 9
	ArmingStatusArea_FORCE_STAY                 ArmingStatusArea_ArmingStatus = 10
)

var ArmingStatusArea_ArmingStatus_name = map[int32]string{
	0:  "DISARMED",
	1:  "ARMED_AWAY",
	2:  "ARMED_STAY",
	3:  "ARMED_STAY_INSTANT",
	4:  "ARMED_TO_NIGHT",
	5:  "ARMED_TO_NIGHT_INSTANT",
	6:  "ARMED_TO_VACATION",
	7:  "ARM_STEP_TO_NEXT_AWAY_MODE",
	8:  "ARM_STEP_TO_NEXT_STAY_MODE",
	9:  "FORCE_AWAY",
	10: "FORCE_STAY",
}
var ArmingStatusArea_ArmingStatus_value = map[string]int32{
	"DISARMED":                   0,
	"ARMED_AWAY":                 1,
	"ARMED_STAY":                 2,
	"ARMED_STAY_INSTANT":         3,
	"ARMED_TO_NIGHT":             4,
	"ARMED_TO_NIGHT_INSTANT":     5,
	"ARMED_TO_VACATION":          6,
	"ARM_STEP_TO_NEXT_AWAY_MODE": 7,
	"ARM_STEP_TO_NEXT_STAY_MODE": 8,
	"FORCE_AWAY":                 9,
	"FORCE_STAY":                 10,
}

func (x ArmingStatusArea_ArmingStatus) String() string {
	return proto.EnumName(ArmingStatusArea_ArmingStatus_name, int32(x))
}
func (ArmingStatusArea_ArmingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6, 0}
}

type ArmingStatusArea_ArmUpState int32

const (
	ArmingStatusArea_NOT_READY        ArmingStatusArea_ArmUpState = 0
	ArmingStatusArea_READY            ArmingStatusArea_ArmUpState = 1
	ArmingStatusArea_READY_FORCE      ArmingStatusArea_ArmUpState = 2
	ArmingStatusArea_ARMED_EXIT_TIMER ArmingStatusArea_ArmUpState = 3
	ArmingStatusArea_ARMED            ArmingStatusArea_ArmUpState = 4
	ArmingStatusArea_FORCE_ARMED      ArmingStatusArea_ArmUpState = 5
	ArmingStatusArea_ARMED_BYPASS     ArmingStatusArea_ArmUpState = 6
)

var ArmingStatusArea_ArmUpState_name = map[int32]string{
	0: "NOT_READY",
	1: "READY",
	2: "READY_FORCE",
	3: "ARMED_EXIT_TIMER",
	4: "ARMED",
	5: "FORCE_ARMED",
	6: "ARMED_BYPASS",
}
var ArmingStatusArea_ArmUpState_value = map[string]int32{
	"NOT_READY":        0,
	"READY":            1,
	"READY_FORCE":      2,
	"ARMED_EXIT_TIMER": 3,
	"ARMED":            4,
	"FORCE_ARMED":      5,
	"ARMED_BYPASS":     6,
}

func (x ArmingStatusArea_ArmUpState) String() string {
	return proto.EnumName(ArmingStatusArea_ArmUpState_name, int32(x))
}
func (ArmingStatusArea_ArmUpState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6, 1}
}

type ArmingStatusArea_AlarmState int32

const (
	ArmingStatusArea_NO_ALARM               ArmingStatusArea_AlarmState = 0
	ArmingStatusArea_ENTRANCE_DELAY         ArmingStatusArea_AlarmState = 1
	ArmingStatusArea_ABORT_DELAY            ArmingStatusArea_AlarmState = 2
	ArmingStatusArea_ALARM_FIRE             ArmingStatusArea_AlarmState = 3
	ArmingStatusArea_ALARM_MEDICAL          ArmingStatusArea_AlarmState = 4
	ArmingStatusArea_ALARM_POLICE           ArmingStatusArea_AlarmState = 5
	ArmingStatusArea_ALARM_BURGLAR          ArmingStatusArea_AlarmState = 6
	ArmingStatusArea_ALARM_AUX1             ArmingStatusArea_AlarmState = 7
	ArmingStatusArea_ALARM_AUX2             ArmingStatusArea_AlarmState = 8
	ArmingStatusArea_ALARM_AUX3             ArmingStatusArea_AlarmState = 9
	ArmingStatusArea_ALARM_AUX4             ArmingStatusArea_AlarmState = 10
	ArmingStatusArea_ALARM_CARBON_MONOXIDE  ArmingStatusArea_AlarmState = 11
	ArmingStatusArea_ALARM_EMERGENCY        ArmingStatusArea_AlarmState = 12
	ArmingStatusArea_ALARM_FREEZE           ArmingStatusArea_AlarmState = 13
	ArmingStatusArea_ALARM_GAS              ArmingStatusArea_AlarmState = 14
	ArmingStatusArea_ALARM_HEAT             ArmingStatusArea_AlarmState = 15
	ArmingStatusArea_ALARM_WATER            ArmingStatusArea_AlarmState = 16
	ArmingStatusArea_ALARM_FIRE_SUPERVISORY ArmingStatusArea_AlarmState = 17
	ArmingStatusArea_ALARM_FIRE_VERIFY      ArmingStatusArea_AlarmState = 18
)

var ArmingStatusArea_AlarmState_name = map[int32]string{
	0:  "NO_ALARM",
	1:  "ENTRANCE_DELAY",
	2:  "ABORT_DELAY",
	3:  "ALARM_FIRE",
	4:  "ALARM_MEDICAL",
	5:  "ALARM_POLICE",
	6:  "ALARM_BURGLAR",
	7:  "ALARM_AUX1",
	8:  "ALARM_AUX2",
	9:  "ALARM_AUX3",
	10: "ALARM_AUX4",
	11: "ALARM_CARBON_MONOXIDE",
	12: "ALARM_EMERGENCY",
	13: "ALARM_FREEZE",
	14: "ALARM_GAS",
	15: "ALARM_HEAT",
	16: "ALARM_WATER",
	17: "ALARM_FIRE_SUPERVISORY",
	18: "ALARM_FIRE_VERIFY",
}
var ArmingStatusArea_AlarmState_value = map[string]int32{
	"NO_ALARM":               0,
	"ENTRANCE_DELAY":         1,
	"ABORT_DELAY":            2,
	"ALARM_FIRE":             3,
	"ALARM_MEDICAL":          4,
	"ALARM_POLICE":           5,
	"ALARM_BURGLAR":          6,
	"ALARM_AUX1":             7,
	"ALARM_AUX2":             8,
	"ALARM_AUX3":             9,
	"ALARM_AUX4":             10,
	"ALARM_CARBON_MONOXIDE":  11,
	"ALARM_EMERGENCY":        12,
	"ALARM_FREEZE":           13,
	"ALARM_GAS":              14,
	"ALARM_HEAT":             15,
	"ALARM_WATER":            16,
	"ALARM_FIRE_SUPERVISORY": 17,
	"ALARM_FIRE_VERIFY":      18,
}

func (x ArmingStatusArea_AlarmState) String() string {
	return proto.EnumName(ArmingStatusArea_AlarmState_name, int32(x))
}
func (ArmingStatusArea_AlarmState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6, 2}
}

type Zone_ZoneStatus int32

const (
	Zone_NORMAL   Zone_ZoneStatus = 0
	Zone_TROUBLE  Zone_ZoneStatus = 1
	Zone_VIOLATED Zone_ZoneStatus = 2
	Zone_BYPASSED Zone_ZoneStatus = 3
)

var Zone_ZoneStatus_name = map[int32]string{
	0: "NORMAL",
	1: "TROUBLE",
	2: "VIOLATED",
	3: "BYPASSED",
}
var Zone_ZoneStatus_value = map[string]int32{
	"NORMAL":   0,
	"TROUBLE":  1,
	"VIOLATED": 2,
	"BYPASSED": 3,
}

func (x Zone_ZoneStatus) String() string {
	return proto.EnumName(Zone_ZoneStatus_name, int32(x))
}
func (Zone_ZoneStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

type Zone_ZoneSubStatus int32

const (
	Zone_UNCONFIGURED Zone_ZoneSubStatus = 0
	Zone_OPEN         Zone_ZoneSubStatus = 1
	Zone_EOL          Zone_ZoneSubStatus = 2
	Zone_SHORT        Zone_ZoneSubStatus = 3
)

var Zone_ZoneSubStatus_name = map[int32]string{
	0: "UNCONFIGURED",
	1: "OPEN",
	2: "EOL",
	3: "SHORT",
}
var Zone_ZoneSubStatus_value = map[string]int32{
	"UNCONFIGURED": 0,
	"OPEN":         1,
	"EOL":          2,
	"SHORT":        3,
}

func (x Zone_ZoneSubStatus) String() string {
	return proto.EnumName(Zone_ZoneSubStatus_name, int32(x))
}
func (Zone_ZoneSubStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 1} }

type ZoneStatusArgs struct {
}

func (m *ZoneStatusArgs) Reset()                    { *m = ZoneStatusArgs{} }
func (m *ZoneStatusArgs) String() string            { return proto.CompactTextString(m) }
func (*ZoneStatusArgs) ProtoMessage()               {}
func (*ZoneStatusArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ZoneStatusReport struct {
	Zones []*Zone `protobuf:"bytes,1,rep,name=zones" json:"zones,omitempty"`
}

func (m *ZoneStatusReport) Reset()                    { *m = ZoneStatusReport{} }
func (m *ZoneStatusReport) String() string            { return proto.CompactTextString(m) }
func (*ZoneStatusReport) ProtoMessage()               {}
func (*ZoneStatusReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ZoneStatusReport) GetZones() []*Zone {
	if m != nil {
		return m.Zones
	}
	return nil
}

type ArmingStatusArgs struct {
}

func (m *ArmingStatusArgs) Reset()                    { *m = ArmingStatusArgs{} }
func (m *ArmingStatusArgs) String() string            { return proto.CompactTextString(m) }
func (*ArmingStatusArgs) ProtoMessage()               {}
func (*ArmingStatusArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ZoneChangeArgs struct {
}

func (m *ZoneChangeArgs) Reset()                    { *m = ZoneChangeArgs{} }
func (m *ZoneChangeArgs) String() string            { return proto.CompactTextString(m) }
func (*ZoneChangeArgs) ProtoMessage()               {}
func (*ZoneChangeArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ArmingChangeArgs struct {
}

func (m *ArmingChangeArgs) Reset()                    { *m = ArmingChangeArgs{} }
func (m *ArmingChangeArgs) String() string            { return proto.CompactTextString(m) }
func (*ArmingChangeArgs) ProtoMessage()               {}
func (*ArmingChangeArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ArmingStatusReport struct {
	Areas []*ArmingStatusArea `protobuf:"bytes,1,rep,name=areas" json:"areas,omitempty"`
}

func (m *ArmingStatusReport) Reset()                    { *m = ArmingStatusReport{} }
func (m *ArmingStatusReport) String() string            { return proto.CompactTextString(m) }
func (*ArmingStatusReport) ProtoMessage()               {}
func (*ArmingStatusReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ArmingStatusReport) GetAreas() []*ArmingStatusArea {
	if m != nil {
		return m.Areas
	}
	return nil
}

type ArmingStatusArea struct {
	Area         int32                         `protobuf:"varint,1,opt,name=area" json:"area,omitempty"`
	ArmingStatus ArmingStatusArea_ArmingStatus `protobuf:"varint,2,opt,name=arming_status,json=armingStatus,enum=elkm1grpc.ArmingStatusArea_ArmingStatus" json:"arming_status,omitempty"`
	ArmUpState   ArmingStatusArea_ArmUpState   `protobuf:"varint,3,opt,name=arm_up_state,json=armUpState,enum=elkm1grpc.ArmingStatusArea_ArmUpState" json:"arm_up_state,omitempty"`
	AlarmState   ArmingStatusArea_AlarmState   `protobuf:"varint,4,opt,name=alarm_state,json=alarmState,enum=elkm1grpc.ArmingStatusArea_AlarmState" json:"alarm_state,omitempty"`
}

func (m *ArmingStatusArea) Reset()                    { *m = ArmingStatusArea{} }
func (m *ArmingStatusArea) String() string            { return proto.CompactTextString(m) }
func (*ArmingStatusArea) ProtoMessage()               {}
func (*ArmingStatusArea) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ArmingStatusArea) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *ArmingStatusArea) GetArmingStatus() ArmingStatusArea_ArmingStatus {
	if m != nil {
		return m.ArmingStatus
	}
	return ArmingStatusArea_DISARMED
}

func (m *ArmingStatusArea) GetArmUpState() ArmingStatusArea_ArmUpState {
	if m != nil {
		return m.ArmUpState
	}
	return ArmingStatusArea_NOT_READY
}

func (m *ArmingStatusArea) GetAlarmState() ArmingStatusArea_AlarmState {
	if m != nil {
		return m.AlarmState
	}
	return ArmingStatusArea_NO_ALARM
}

type ArmArgs struct {
	Area int32 `protobuf:"varint,1,opt,name=area" json:"area,omitempty"`
	Pin  int32 `protobuf:"varint,2,opt,name=pin" json:"pin,omitempty"`
}

func (m *ArmArgs) Reset()                    { *m = ArmArgs{} }
func (m *ArmArgs) String() string            { return proto.CompactTextString(m) }
func (*ArmArgs) ProtoMessage()               {}
func (*ArmArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ArmArgs) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *ArmArgs) GetPin() int32 {
	if m != nil {
		return m.Pin
	}
	return 0
}

type Zone struct {
	Zone        int32              `protobuf:"varint,1,opt,name=zone" json:"zone,omitempty"`
	Description string             `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Status      Zone_ZoneStatus    `protobuf:"varint,3,opt,name=status,enum=elkm1grpc.Zone_ZoneStatus" json:"status,omitempty"`
	SubStatus   Zone_ZoneSubStatus `protobuf:"varint,4,opt,name=sub_status,json=subStatus,enum=elkm1grpc.Zone_ZoneSubStatus" json:"sub_status,omitempty"`
}

func (m *Zone) Reset()                    { *m = Zone{} }
func (m *Zone) String() string            { return proto.CompactTextString(m) }
func (*Zone) ProtoMessage()               {}
func (*Zone) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Zone) GetZone() int32 {
	if m != nil {
		return m.Zone
	}
	return 0
}

func (m *Zone) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Zone) GetStatus() Zone_ZoneStatus {
	if m != nil {
		return m.Status
	}
	return Zone_NORMAL
}

func (m *Zone) GetSubStatus() Zone_ZoneSubStatus {
	if m != nil {
		return m.SubStatus
	}
	return Zone_UNCONFIGURED
}

func init() {
	proto.RegisterType((*ZoneStatusArgs)(nil), "elkm1grpc.ZoneStatusArgs")
	proto.RegisterType((*ZoneStatusReport)(nil), "elkm1grpc.ZoneStatusReport")
	proto.RegisterType((*ArmingStatusArgs)(nil), "elkm1grpc.ArmingStatusArgs")
	proto.RegisterType((*ZoneChangeArgs)(nil), "elkm1grpc.ZoneChangeArgs")
	proto.RegisterType((*ArmingChangeArgs)(nil), "elkm1grpc.ArmingChangeArgs")
	proto.RegisterType((*ArmingStatusReport)(nil), "elkm1grpc.ArmingStatusReport")
	proto.RegisterType((*ArmingStatusArea)(nil), "elkm1grpc.ArmingStatusArea")
	proto.RegisterType((*ArmArgs)(nil), "elkm1grpc.ArmArgs")
	proto.RegisterType((*Zone)(nil), "elkm1grpc.Zone")
	proto.RegisterEnum("elkm1grpc.ArmingStatusArea_ArmingStatus", ArmingStatusArea_ArmingStatus_name, ArmingStatusArea_ArmingStatus_value)
	proto.RegisterEnum("elkm1grpc.ArmingStatusArea_ArmUpState", ArmingStatusArea_ArmUpState_name, ArmingStatusArea_ArmUpState_value)
	proto.RegisterEnum("elkm1grpc.ArmingStatusArea_AlarmState", ArmingStatusArea_AlarmState_name, ArmingStatusArea_AlarmState_value)
	proto.RegisterEnum("elkm1grpc.Zone_ZoneStatus", Zone_ZoneStatus_name, Zone_ZoneStatus_value)
	proto.RegisterEnum("elkm1grpc.Zone_ZoneSubStatus", Zone_ZoneSubStatus_name, Zone_ZoneSubStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ElkGRPC service

type ElkGRPCClient interface {
	ArmStay(ctx context.Context, in *ArmArgs, opts ...grpc.CallOption) (*ArmingStatusArea, error)
	ArmAway(ctx context.Context, in *ArmArgs, opts ...grpc.CallOption) (*ArmingStatusArea, error)
	Disarm(ctx context.Context, in *ArmArgs, opts ...grpc.CallOption) (*ArmingStatusArea, error)
	ArmingStatus(ctx context.Context, in *ArmingStatusArgs, opts ...grpc.CallOption) (*ArmingStatusReport, error)
	ZoneStatus(ctx context.Context, in *ZoneStatusArgs, opts ...grpc.CallOption) (*ZoneStatusReport, error)
	ArmingStatusChange(ctx context.Context, in *ArmingChangeArgs, opts ...grpc.CallOption) (ElkGRPC_ArmingStatusChangeClient, error)
	ZoneChange(ctx context.Context, in *ZoneChangeArgs, opts ...grpc.CallOption) (ElkGRPC_ZoneChangeClient, error)
}

type elkGRPCClient struct {
	cc *grpc.ClientConn
}

func NewElkGRPCClient(cc *grpc.ClientConn) ElkGRPCClient {
	return &elkGRPCClient{cc}
}

func (c *elkGRPCClient) ArmStay(ctx context.Context, in *ArmArgs, opts ...grpc.CallOption) (*ArmingStatusArea, error) {
	out := new(ArmingStatusArea)
	err := grpc.Invoke(ctx, "/elkm1grpc.ElkGRPC/ArmStay", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elkGRPCClient) ArmAway(ctx context.Context, in *ArmArgs, opts ...grpc.CallOption) (*ArmingStatusArea, error) {
	out := new(ArmingStatusArea)
	err := grpc.Invoke(ctx, "/elkm1grpc.ElkGRPC/ArmAway", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elkGRPCClient) Disarm(ctx context.Context, in *ArmArgs, opts ...grpc.CallOption) (*ArmingStatusArea, error) {
	out := new(ArmingStatusArea)
	err := grpc.Invoke(ctx, "/elkm1grpc.ElkGRPC/Disarm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elkGRPCClient) ArmingStatus(ctx context.Context, in *ArmingStatusArgs, opts ...grpc.CallOption) (*ArmingStatusReport, error) {
	out := new(ArmingStatusReport)
	err := grpc.Invoke(ctx, "/elkm1grpc.ElkGRPC/ArmingStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elkGRPCClient) ZoneStatus(ctx context.Context, in *ZoneStatusArgs, opts ...grpc.CallOption) (*ZoneStatusReport, error) {
	out := new(ZoneStatusReport)
	err := grpc.Invoke(ctx, "/elkm1grpc.ElkGRPC/ZoneStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elkGRPCClient) ArmingStatusChange(ctx context.Context, in *ArmingChangeArgs, opts ...grpc.CallOption) (ElkGRPC_ArmingStatusChangeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ElkGRPC_serviceDesc.Streams[0], c.cc, "/elkm1grpc.ElkGRPC/ArmingStatusChange", opts...)
	if err != nil {
		return nil, err
	}
	x := &elkGRPCArmingStatusChangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ElkGRPC_ArmingStatusChangeClient interface {
	Recv() (*ArmingStatusReport, error)
	grpc.ClientStream
}

type elkGRPCArmingStatusChangeClient struct {
	grpc.ClientStream
}

func (x *elkGRPCArmingStatusChangeClient) Recv() (*ArmingStatusReport, error) {
	m := new(ArmingStatusReport)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *elkGRPCClient) ZoneChange(ctx context.Context, in *ZoneChangeArgs, opts ...grpc.CallOption) (ElkGRPC_ZoneChangeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ElkGRPC_serviceDesc.Streams[1], c.cc, "/elkm1grpc.ElkGRPC/ZoneChange", opts...)
	if err != nil {
		return nil, err
	}
	x := &elkGRPCZoneChangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ElkGRPC_ZoneChangeClient interface {
	Recv() (*Zone, error)
	grpc.ClientStream
}

type elkGRPCZoneChangeClient struct {
	grpc.ClientStream
}

func (x *elkGRPCZoneChangeClient) Recv() (*Zone, error) {
	m := new(Zone)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ElkGRPC service

type ElkGRPCServer interface {
	ArmStay(context.Context, *ArmArgs) (*ArmingStatusArea, error)
	ArmAway(context.Context, *ArmArgs) (*ArmingStatusArea, error)
	Disarm(context.Context, *ArmArgs) (*ArmingStatusArea, error)
	ArmingStatus(context.Context, *ArmingStatusArgs) (*ArmingStatusReport, error)
	ZoneStatus(context.Context, *ZoneStatusArgs) (*ZoneStatusReport, error)
	ArmingStatusChange(*ArmingChangeArgs, ElkGRPC_ArmingStatusChangeServer) error
	ZoneChange(*ZoneChangeArgs, ElkGRPC_ZoneChangeServer) error
}

func RegisterElkGRPCServer(s *grpc.Server, srv ElkGRPCServer) {
	s.RegisterService(&_ElkGRPC_serviceDesc, srv)
}

func _ElkGRPC_ArmStay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArmArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElkGRPCServer).ArmStay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elkm1grpc.ElkGRPC/ArmStay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElkGRPCServer).ArmStay(ctx, req.(*ArmArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElkGRPC_ArmAway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArmArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElkGRPCServer).ArmAway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elkm1grpc.ElkGRPC/ArmAway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElkGRPCServer).ArmAway(ctx, req.(*ArmArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElkGRPC_Disarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArmArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElkGRPCServer).Disarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elkm1grpc.ElkGRPC/Disarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElkGRPCServer).Disarm(ctx, req.(*ArmArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElkGRPC_ArmingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArmingStatusArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElkGRPCServer).ArmingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elkm1grpc.ElkGRPC/ArmingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElkGRPCServer).ArmingStatus(ctx, req.(*ArmingStatusArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElkGRPC_ZoneStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoneStatusArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElkGRPCServer).ZoneStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elkm1grpc.ElkGRPC/ZoneStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElkGRPCServer).ZoneStatus(ctx, req.(*ZoneStatusArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElkGRPC_ArmingStatusChange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ArmingChangeArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ElkGRPCServer).ArmingStatusChange(m, &elkGRPCArmingStatusChangeServer{stream})
}

type ElkGRPC_ArmingStatusChangeServer interface {
	Send(*ArmingStatusReport) error
	grpc.ServerStream
}

type elkGRPCArmingStatusChangeServer struct {
	grpc.ServerStream
}

func (x *elkGRPCArmingStatusChangeServer) Send(m *ArmingStatusReport) error {
	return x.ServerStream.SendMsg(m)
}

func _ElkGRPC_ZoneChange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ZoneChangeArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ElkGRPCServer).ZoneChange(m, &elkGRPCZoneChangeServer{stream})
}

type ElkGRPC_ZoneChangeServer interface {
	Send(*Zone) error
	grpc.ServerStream
}

type elkGRPCZoneChangeServer struct {
	grpc.ServerStream
}

func (x *elkGRPCZoneChangeServer) Send(m *Zone) error {
	return x.ServerStream.SendMsg(m)
}

var _ElkGRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elkm1grpc.ElkGRPC",
	HandlerType: (*ElkGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ArmStay",
			Handler:    _ElkGRPC_ArmStay_Handler,
		},
		{
			MethodName: "ArmAway",
			Handler:    _ElkGRPC_ArmAway_Handler,
		},
		{
			MethodName: "Disarm",
			Handler:    _ElkGRPC_Disarm_Handler,
		},
		{
			MethodName: "ArmingStatus",
			Handler:    _ElkGRPC_ArmingStatus_Handler,
		},
		{
			MethodName: "ZoneStatus",
			Handler:    _ElkGRPC_ZoneStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ArmingStatusChange",
			Handler:       _ElkGRPC_ArmingStatusChange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ZoneChange",
			Handler:       _ElkGRPC_ZoneChange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "elkm1grpc.proto",
}

func init() { proto.RegisterFile("elkm1grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 912 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0x16, 0x45, 0x3d, 0xac, 0xd1, 0x6b, 0xbc, 0x6d, 0x02, 0x47, 0x41, 0x0a, 0x83, 0x40, 0x0b,
	0x9f, 0xdc, 0x58, 0xe9, 0xa5, 0x6d, 0x80, 0x62, 0x45, 0xae, 0x64, 0x02, 0x7c, 0x08, 0x4b, 0xca,
	0xb1, 0x72, 0x21, 0xe8, 0x94, 0x50, 0x85, 0xd8, 0x92, 0x20, 0xc9, 0x28, 0xda, 0xfe, 0xab, 0xfe,
	0xaa, 0x1e, 0x7a, 0xea, 0xb5, 0x97, 0x62, 0x77, 0x29, 0x92, 0x12, 0x94, 0xa4, 0xc8, 0x6d, 0x1e,
	0xdf, 0x7c, 0xf3, 0x69, 0x76, 0x39, 0x2b, 0xe8, 0x26, 0xf7, 0xef, 0x1f, 0xae, 0x66, 0xeb, 0xd5,
	0xbb, 0xcb, 0xd5, 0x7a, 0xb9, 0x5d, 0x92, 0x46, 0x16, 0x30, 0x10, 0x3a, 0x6f, 0x97, 0x8b, 0x24,
	0xd8, 0xc6, 0xdb, 0xc7, 0x0d, 0x5d, 0xcf, 0x36, 0xc6, 0xf7, 0x80, 0x79, 0x84, 0x27, 0xab, 0xe5,
	0x7a, 0x4b, 0xbe, 0x86, 0xea, 0xef, 0xcb, 0x45, 0xb2, 0x39, 0xd3, 0xce, 0xf5, 0x8b, 0x66, 0xbf,
	0x7b, 0x99, 0x33, 0x0a, 0x2c, 0x57, 0x59, 0x83, 0x00, 0xd2, 0xf5, 0xc3, 0x7c, 0x31, 0x2b, 0xd0,
	0xa5, 0x0d, 0xcc, 0x5f, 0xe2, 0xc5, 0x2c, 0x91, 0x91, 0x0c, 0x55, 0x88, 0x8d, 0x80, 0x14, 0x2b,
	0xd3, 0xb6, 0x57, 0x50, 0x8d, 0xd7, 0x49, 0xbc, 0x6b, 0xfb, 0xbc, 0xd0, 0x76, 0xbf, 0x4f, 0x12,
	0x73, 0x85, 0x34, 0xfe, 0xa9, 0x1f, 0x6a, 0x48, 0x62, 0x42, 0xa0, 0x22, 0xb2, 0x67, 0xda, 0xb9,
	0x76, 0x51, 0xe5, 0xd2, 0x26, 0x2e, 0xb4, 0x63, 0x89, 0x8b, 0x36, 0x12, 0x78, 0x56, 0x3e, 0xd7,
	0x2e, 0x3a, 0xfd, 0x8b, 0x8f, 0xf4, 0xd8, 0x0b, 0xf0, 0x56, 0x5c, 0xf0, 0xc8, 0x35, 0x08, 0x3f,
	0x7a, 0x5c, 0x49, 0xba, 0xe4, 0x4c, 0x97, 0x6c, 0xdf, 0x7c, 0x82, 0x6d, 0xb2, 0x12, 0x7e, 0xc2,
	0x21, 0xce, 0x6c, 0x32, 0x82, 0x66, 0x7c, 0x2f, 0xb8, 0x14, 0x51, 0xe5, 0x7f, 0x10, 0x09, 0xf8,
	0x8e, 0x28, 0xb3, 0x8d, 0x7f, 0x35, 0x68, 0x15, 0xb1, 0xa4, 0x05, 0x27, 0x96, 0x1d, 0x50, 0xee,
	0x32, 0x0b, 0x4b, 0xa4, 0x03, 0x20, 0xcd, 0x88, 0xbe, 0xa1, 0x53, 0xd4, 0x72, 0x3f, 0x08, 0xe9,
	0x14, 0xcb, 0xe4, 0x29, 0x90, 0xdc, 0x8f, 0x6c, 0x2f, 0x08, 0xa9, 0x17, 0xa2, 0x4e, 0x08, 0x74,
	0x54, 0x3c, 0xf4, 0x23, 0xcf, 0x1e, 0x5d, 0x87, 0x58, 0x21, 0x3d, 0x78, 0xba, 0x1f, 0xcb, 0xf0,
	0x55, 0xf2, 0x04, 0x4e, 0xb3, 0xdc, 0x0d, 0x35, 0x69, 0x68, 0xfb, 0x1e, 0xd6, 0xc8, 0x57, 0xd0,
	0xa3, 0xdc, 0x8d, 0x82, 0x90, 0x8d, 0x65, 0x15, 0xbb, 0x0d, 0xa5, 0x92, 0xc8, 0xf5, 0x2d, 0x86,
	0xf5, 0xa3, 0x79, 0xa9, 0x44, 0xe6, 0x4f, 0x84, 0xdc, 0xa1, 0xcf, 0x4d, 0xa6, 0xe4, 0x37, 0x72,
	0x5f, 0xca, 0x07, 0xe3, 0x0f, 0x80, 0x7c, 0xc0, 0xa4, 0x0d, 0x0d, 0xcf, 0x0f, 0x23, 0xce, 0xa8,
	0x35, 0xc5, 0x12, 0x69, 0x40, 0x55, 0x99, 0x1a, 0xe9, 0x42, 0x53, 0x9a, 0x91, 0xac, 0xc6, 0x32,
	0xf9, 0x12, 0x50, 0xe9, 0x65, 0xb7, 0x76, 0x18, 0x85, 0xb6, 0xcb, 0x38, 0xea, 0xa2, 0x42, 0x0d,
	0xae, 0x22, 0x2a, 0xd2, 0xce, 0x32, 0x50, 0x25, 0x08, 0x2d, 0x55, 0x31, 0x98, 0x8e, 0x69, 0x10,
	0x60, 0xcd, 0xf8, 0xbb, 0x0c, 0x90, 0x9f, 0x8a, 0x18, 0xbc, 0xe7, 0x47, 0xd4, 0xa1, 0xdc, 0xc5,
	0x92, 0x18, 0x20, 0xf3, 0x42, 0x4e, 0x3d, 0x93, 0x45, 0x16, 0x73, 0x68, 0xaa, 0x82, 0x0e, 0x7c,
	0x1e, 0xa6, 0x81, 0xb2, 0x3c, 0x0d, 0x81, 0x8f, 0x86, 0x36, 0x67, 0xa8, 0x93, 0x53, 0x68, 0x2b,
	0xdf, 0x65, 0x96, 0x6d, 0x52, 0x07, 0x2b, 0xb2, 0xad, 0x0c, 0x8d, 0x7d, 0xc7, 0x36, 0x19, 0x56,
	0x73, 0xd0, 0x60, 0xc2, 0x47, 0x0e, 0xe5, 0x58, 0xcb, 0x79, 0xe8, 0xe4, 0xf6, 0x0a, 0xeb, 0x7b,
	0x7e, 0x5f, 0x8d, 0x31, 0xf3, 0x5f, 0xa9, 0x31, 0x66, 0xfe, 0x77, 0x08, 0xe4, 0x19, 0x3c, 0x51,
	0xbe, 0x49, 0xf9, 0xc0, 0xf7, 0x22, 0xd7, 0xf7, 0xfc, 0x5b, 0xdb, 0x62, 0xd8, 0x24, 0x5f, 0x40,
	0x57, 0xa5, 0x98, 0xcb, 0xf8, 0x88, 0x79, 0xe6, 0x14, 0x5b, 0xb9, 0xa8, 0x21, 0x67, 0xec, 0x2d,
	0xc3, 0xb6, 0x18, 0xbd, 0x8a, 0x8c, 0x68, 0x80, 0x9d, 0xbc, 0xc1, 0x35, 0xa3, 0x21, 0x76, 0xe5,
	0x2f, 0x97, 0xfe, 0x1b, 0x1a, 0x32, 0x8e, 0x28, 0xef, 0x52, 0xf6, 0xcb, 0xa3, 0x60, 0x32, 0x66,
	0xfc, 0xc6, 0x0e, 0x7c, 0x3e, 0xc5, 0x53, 0x79, 0x97, 0xf2, 0xdc, 0x0d, 0xe3, 0xf6, 0x70, 0x8a,
	0xc4, 0xf8, 0x16, 0xea, 0x74, 0xfd, 0x20, 0x16, 0xc9, 0xd1, 0x4f, 0x1d, 0x41, 0x5f, 0xcd, 0x17,
	0xf2, 0x03, 0xaf, 0x72, 0x61, 0x1a, 0x7f, 0x96, 0xa1, 0x22, 0xb6, 0x92, 0x80, 0x8b, 0xd5, 0xb5,
	0x83, 0x0b, 0x9b, 0x9c, 0x43, 0xf3, 0xe7, 0x64, 0xf3, 0x6e, 0x3d, 0x5f, 0x6d, 0xe7, 0x4b, 0x55,
	0xd6, 0xe0, 0xc5, 0x10, 0xe9, 0x43, 0x2d, 0x5d, 0x1a, 0xea, 0x33, 0xef, 0x1d, 0xec, 0xc3, 0xcb,
	0xc2, 0x02, 0x4d, 0x91, 0xe4, 0x35, 0xc0, 0xe6, 0xf1, 0x6e, 0xb7, 0x6c, 0xd4, 0x57, 0xfd, 0xe2,
	0x68, 0xdd, 0xe3, 0x5d, 0x5a, 0xda, 0xd8, 0xec, 0x4c, 0x83, 0x02, 0xe4, 0x9c, 0x04, 0xa0, 0xe6,
	0xf9, 0xdc, 0xa5, 0x0e, 0x96, 0x48, 0x13, 0xea, 0x21, 0xf7, 0x27, 0x03, 0x87, 0xa1, 0x26, 0x2e,
	0xda, 0x8d, 0xed, 0x3b, 0x34, 0x64, 0x16, 0x96, 0x85, 0xa7, 0x6e, 0x24, 0xb3, 0x50, 0x37, 0x7e,
	0x82, 0xf6, 0x1e, 0xbd, 0x38, 0xaa, 0x89, 0x67, 0xfa, 0xde, 0xd0, 0x1e, 0x4d, 0xb8, 0x5c, 0x09,
	0x27, 0x50, 0xf1, 0xc7, 0xcc, 0x43, 0x8d, 0xd4, 0x41, 0x67, 0xbe, 0x83, 0x65, 0x71, 0xef, 0x83,
	0x6b, 0x9f, 0x87, 0xa8, 0xf7, 0xff, 0xd2, 0xa1, 0xce, 0xee, 0xdf, 0x8f, 0xf8, 0xd8, 0x24, 0xaf,
	0xe5, 0xc4, 0x83, 0x6d, 0xfc, 0x1b, 0x21, 0xfb, 0xab, 0x49, 0x9c, 0x42, 0xef, 0x63, 0x9b, 0xda,
	0x28, 0xa5, 0xd5, 0xf4, 0xd7, 0xcf, 0xab, 0xfe, 0x11, 0x6a, 0xd6, 0x7c, 0x13, 0xaf, 0x1f, 0x3e,
	0xa7, 0xd8, 0x39, 0xd8, 0x89, 0x1f, 0x86, 0xcf, 0x36, 0xbd, 0x17, 0x1f, 0x48, 0xaa, 0xe7, 0xc9,
	0x28, 0x91, 0xe1, 0xde, 0xb1, 0x3c, 0x3b, 0x38, 0xce, 0x02, 0xd3, 0xf3, 0xa3, 0xa9, 0x8c, 0x87,
	0xef, 0x3f, 0x7f, 0xea, 0x61, 0x3c, 0xa2, 0x2d, 0x7f, 0x31, 0x3f, 0xa1, 0xed, 0xa5, 0x46, 0x7e,
	0x50, 0xda, 0x52, 0xae, 0x43, 0x6d, 0x05, 0xa6, 0xc3, 0xd7, 0xfc, 0xa5, 0x76, 0x57, 0x93, 0xff,
	0x13, 0x5e, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x00, 0xb9, 0xdf, 0x3a, 0x08, 0x00, 0x00,
}
